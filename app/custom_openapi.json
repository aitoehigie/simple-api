{
    "openapi": "3.0.0",
    "info": {
        "title": "SimpleAPI",
        "version": "1.0.0"
    },
    "paths": {
        "/configs": {
            "get": {
                "summary": "List",
                "description": "SQL query: SELECT * FROM configs;\n\nsummary: list all configs\n\narguments: None\n\nreturn: valid json contain all configs table rows",
                "operationId": "List_configs_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create",
                "description": "SQL query: INSERT INTO configs (name, metadata) VALUES (nameValue, metadataValue)\n\nsummary: create new config into configs table\n\narguments: (config: schemas.ConfigCeate [an instance of ConfigCreate class])\n\nreturn: json response contain success message or failed message with 400 ",
                "operationId": "Create_configs_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/configs/{name}": {
            "get": {
                "summary": "Get",
                "description": "SQL query: SELECT * FROM configs WHERE name=name;\n\nsummary: get config by name\n\narguments: (name:str [config name])\n\nreturn: json response if name exists else failed message with 404",
                "operationId": "Get_configs__name__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Name",
                            "type": "string"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update",
                "description": "SQL query: UPDATE configs SET metadata=metadata WHERE name=name;\n\nsummary: update config by name\n\narguments: (name: str [config name]), (metadata: str [config metadata])\n\nreturn: json response",
                "operationId": "Update_configs__name__put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Name",
                            "type": "string"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Metadata",
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete",
                "description": "SQL query: DELETE FROM configs WHERE name=name;\n\nsummary: delete config by name\n\narguments: (name: str [config name])\n\nreturn: json succeed message if config has deleted else failed message if config doesn't exists",
                "operationId": "Delete_configs__name__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Name",
                            "type": "string"
                        },
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/search": {
            "get": {
                "summary": "Query",
                "description": "SQL query: SELECT * FROM configs WHERE (configs.metadata #>> %(metadata_1)s) = %(param_1)s;\n\nsummary: get all configs has specific metadata by nested key and value\n\narguments: (metadata: str [metadata.keys...=value])\n\nreturn: valid json contain all configs matched by metadata search\n\n\n!!!!!! DO NOT USE \"Try it out\" INSTEAD OF THAT USE curl, exmaple:\n\ncurl -X GET 'http://localhost:5057/search?metadata.monitoring.enabled=true' -H 'Content-type: application/json'",
                "operationId": "Query_search_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Name",
                            "type": "example: metadata.key1.key2=value"
                        },
                        "name": "metadata.[nested key]=value",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Config": {
                "title": "Config",
                "required": [
                    "name",
                    "metadata"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string"
                    },
                    "metadata": {
                        "title": "Metadata",
                        "type": "json"
                    }
                },
                "description": "Config table"
            },
            "HTTPValidationError": {
                "title": "HTTPValidationError",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            },
            "ValidationError": {
                "title": "ValidationError",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "loc": {
                        "title": "Location",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "msg": {
                        "title": "Message",
                        "type": "string"
                    },
                    "type": {
                        "title": "Error Type",
                        "type": "string"
                    }
                }
            }
        }
    }
}