name: SimpleAPI(CI/CD)

on: 
  push: 
    branches: 
      - Hadi

env: 
  # CI env
  POSTGRES_USER: testdb
  POSTGRES_PASSWORD: test112233
  POSTGRES_DB: testdb
  DB_HOST: localhost
  APP_HOST: localhost
  APP_PORT: 5057

  # CD env
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: us-central1-a
  GKE_CLUSTER: api-cluster
  IMAGE: simpleapi

jobs: 

  CI:
    name: SimpleAPI(CI)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1
    
    # setup python3.7
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    
    # install python req file and run tests DB
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        sudo apt-get install libpq-dev
        pip install -r requirements.txt
        pip install uvicorn

        sudo docker run --rm -d \
          --name=apidb \
          -p=5432 \
          -h=0.0.0.0 \
          --env-file=./.env \
          postgres:12.0-alpine

    # lint the codes using flake8
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # run unit tests with pytest
    - name: Unit tests with pytest
      run: |
        cd unit
        dbport=$(docker port apidb)
        export DB_PORT=${dbport:20:25}
        pytest -vv

    # run integration tests with nose
    - name: Integration tests with nose
      run: |
        cd integration
        dbport=$(docker port apidb)
        export DB_PORT=${dbport:20:25}
        nosetests --verbosity=2 test_integration.py


  CD: 
    name: SimpleAPI(CD)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@master

      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "270.0.0"
          service_account_email: ${{ secrets.GKE_EMAIL }}
          service_account_key: ${{ secrets.GKE_KEY }}

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker

      # Build the Docker image
      - name: Build
        run: |
          docker build -t gcr.io/"$GKE_PROJECT"/"$IMAGE":"$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |
          docker push gcr.io/$GKE_PROJECT/$IMAGE:$GITHUB_SHA

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
          kubectl apply -f gcp/api-config.yaml,gcp/api-deployment.yaml,gcp/api-service.yaml,gcp/postgres-config.yaml,gcp/postgres-deployment.yaml,gcp/postgres-service.yaml,gcp/postgres-volume.yaml
